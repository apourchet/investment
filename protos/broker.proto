syntax = "proto3";

package protos;

service Broker {
    rpc GetInstrumentList(InstrumentListReq) returns (InstrumentListResp) {}

    rpc GetPrices(PriceListReq) returns (PriceListResp) {}

    rpc GetLastCandle(LastCandleReq) returns (LastCandleResp) {}

    // TODO http://developer.oanda.com/rest-live/rates/#retrieveInstrumentHistory

    rpc StreamPrices(StreamPricesReq) returns (stream Quote) {}

    rpc StreamCandle(StreamCandleReq) returns (stream Candle) {}

    rpc GetAccounts(AccountListReq) returns (AccountListResp) {}

    rpc GetAccountInfo(AccountInfoReq) returns (AccountInfoResp) {}

    rpc GetOrders(OrderListReq) returns (OrderListResp) {}

    rpc CreateOrder(OrderCreationReq) returns (OrderCreationResp) {}

    // TODO http://developer.oanda.com/rest-live/orders/#modifyExistingOrder

    // TODO http://developer.oanda.com/rest-live/orders/#closeOrder
}

message InstrumentListReq {
    AuthToken token = 1;
    string accountId = 2;
}

message InstrumentListResp {
    repeated Instrument instruments = 1;
}

message PriceListReq {
    AuthToken token = 1;
    repeated string instrumentId = 2;
}

message PriceListResp {
    repeated Quote quotes = 1;
}

message LastCandleReq {
    AuthToken token = 1;
    string instrumentId = 2;
}

message LastCandleResp {
    Candle candle = 1;
}

message StreamPricesReq {
    AuthToken token = 1;
    string instrumentId = 2;
}

message StreamCandleReq {
    AuthToken token = 1;
    string instrumentId = 2;
}

message AccountListReq {
    AuthToken token = 1;
}

message AccountListResp {
    repeated Account accounts = 1;
}

message AccountInfoReq {
    AuthToken token = 1;
    string accountId = 2;
}

message AccountInfoResp {
    AccountInfo info = 1;
}

message OrderListReq {
    AuthToken token = 1;
    string accountId = 2;
}

message OrderListResp {
    repeated Order orders = 1;
}

message OrderCreationReq {
    AuthToken token = 1;
    string instrumentId = 2;
    int32 units = 3;
    string side = 4;
    string type = 5;
}

message OrderCreationResp {
    string instrumentId = 1;
    double price = 2;
    string time = 3;
    string id = 4;
}

message Quote {
    string instrumentId = 1;
    double bid = 2;
    double ask = 3;
    string time = 4;
    string status = 5;
}

message Candle {
    string instrumentId = 1;
    double open = 2;
    double high = 3;
    double low = 4;
    double close = 5;
    string time = 6;
    string status = 7;
}

message Empty { }

message AuthToken {
    string value = 1;
}

message Instrument {
    string instrumentId = 1;
    string displayName = 2;
    string pip = 3;
    int32 maxTradeUnits = 4;
}

message Account {
    string id = 1;
    string name = 2;
    string currency = 3;
    double marginRate = 4;
}

message AccountInfo {
    string id = 1;
    string name = 2;
    string currency = 3;
    double margin_rate = 4;
    double balance = 5;
    double unrealized_pl = 6;
    double realized_pl = 7;
    double margin_used = 8;
    double margin_avail = 9;
    double open_trades = 10;
    double open_orders = 11;
}

message Order {
    string id = 1;
    string instrumentId = 2;
    int32 units = 3;
    string side = 4;
    string type = 5; //The type of the order ‘limit’, ‘stop’, ‘marketIfTouched’ or ‘market’
    string time = 6;
    double price = 7;
    double take_profit = 8;
    double stop_loss = 9;
    string expiry = 10;
    double upper_bound = 11;
    double lower_bound = 12;
    double trailing_stop = 13;
}

